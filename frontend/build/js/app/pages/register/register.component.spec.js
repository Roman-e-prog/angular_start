"use strict";var _testing=require("@angular/core/testing"),_register=require("./register.component"),_core=require("@ng-icons/core"),_ngxToastr=require("ngx-toastr"),_router=require("@angular/router"),_app=require("../../app.routes"),_rxjs=require("rxjs"),_testing2=require("@angular/common/http/testing"),_uniqueUsername=require("../../validators/uniqueUsername"),_outline=require("@ng-icons/material-icons/outline"),_forms=require("@angular/forms"),_uniqueEmail=require("../../validators/uniqueEmail"),_animations=require("@angular/platform-browser/animations");describe("RegisterComponent",(()=>{let e,t,r,a,n,s,o,i,l,u,c;beforeEach((async()=>{n=jasmine.createSpyObj("ToastrService",["error"]),l={uniqueUsernameValidator:jasmine.createSpy("uniqueUsernameValidator").and.callFake((()=>e=>"takenUsername"===e.value?(0,_rxjs.of)({usernameTaken:!0}):(0,_rxjs.of)(null)))},c={uniqueEmailValidator:jasmine.createSpy("uniqueEmailValidator").and.callFake((()=>e=>"takenemail@test.de"===e.value?(0,_rxjs.of)({emailTaken:!0}):(0,_rxjs.of)(null)))},await _testing.TestBed.configureTestingModule({imports:[_register.RegisterComponent,_core.NgIconsModule,_testing2.HttpClientTestingModule,_forms.ReactiveFormsModule,_animations.BrowserAnimationsModule],providers:[(0,_core.provideIcons)({matMenuOutline:_outline.matMenuOutline}),(0,_testing2.provideHttpClientTesting)(),(0,_router.provideRouter)(_app.routes),(0,_animations.provideAnimations)(),{provide:_ngxToastr.ToastrService,useValue:n},{provide:_uniqueUsername.UsernameValidator,useValue:l},{provide:_uniqueEmail.EmailValidator,useValue:c}]}).compileComponents(),t=_testing.TestBed.createComponent(_register.RegisterComponent),e=t.componentInstance,r=_testing.TestBed.inject(_ngxToastr.ToastrService),a=_testing.TestBed.inject(_router.ActivatedRoute),s=_testing.TestBed.inject(_testing2.HttpTestingController),o=_testing.TestBed.inject(_router.Router),i=_testing.TestBed.inject(_uniqueUsername.UsernameValidator),u=_testing.TestBed.inject(_uniqueEmail.EmailValidator),t.detectChanges()})),afterEach((()=>{s.verify()})),xit("should create",(()=>{expect(e).toBeTruthy()})),it("should render all elements",(async()=>{s.expectOne("assets/navlinks.json").flush([]),await t.whenStable();const e=t.debugElement.nativeElement.querySelector(".registerTitle"),r=t.debugElement.nativeElement.querySelector("#vorname"),a=t.debugElement.nativeElement.querySelector("#nachname"),n=t.debugElement.nativeElement.querySelector("#username"),o=t.debugElement.nativeElement.querySelector("#email"),i=t.debugElement.nativeElement.querySelector("#password"),l=t.debugElement.nativeElement.querySelector("#passwordConfirm"),u=t.debugElement.nativeElement.querySelector(".mainBtn"),c=t.debugElement.nativeElement.querySelector(".loginLink");expect(e).toBeTruthy(),expect(r).toBeTruthy(),expect(a).toBeTruthy(),expect(n).toBeTruthy(),expect(o).toBeTruthy(),expect(i).toBeTruthy(),expect(l).toBeTruthy(),expect(u).toBeTruthy(),expect(c).toBeTruthy()})),it("should show validation errors for empty required fields",(async()=>{s.expectOne("assets/navlinks.json").flush([]),await t.whenStable();const r=e.registerForm;r.controls.vorname.markAsTouched(),r.controls.nachname.markAsTouched(),r.controls.username.markAsTouched(),r.controls.email.markAsTouched(),r.controls.password.markAsTouched(),r.controls.passwordConfirm.markAsTouched(),t.detectChanges();const a=t.debugElement.nativeElement.querySelectorAll(".error");expect(a.length).toBeGreaterThan(0)})),it("should show error if username is already taken",(()=>{s.expectOne("assets/navlinks.json").flush([]);const r=e.registerForm.controls.username;r.setAsyncValidators(l.uniqueUsernameValidator()),r.setValue("takenUsername"),t.detectChanges(),expect(l.uniqueUsernameValidator).toHaveBeenCalled(),t.detectChanges(),expect(r.errors).toEqual({usernameTaken:!0})})),it("should show error if email is already taken",(async()=>{s.expectOne("assets/navlinks.json").flush([]),await t.whenStable();const r=e.registerForm.controls.email;r.setAsyncValidators(c.uniqueEmailValidator()),r.setValue("takenemail@test.de"),t.detectChanges(),expect(c.uniqueEmailValidator).toHaveBeenCalled(),t.detectChanges(),expect(r.errors).toEqual({emailTaken:!0})})),it("should show error if passwords do not match",(async()=>{s.expectOne("assets/navlinks.json").flush([]),await t.whenStable(),e.registerForm.controls.password.setValue("password123"),e.registerForm.controls.passwordConfirm.setValue("differentPassword"),t.detectChanges(),expect(e.registerForm.errors).toEqual({passwordsMismatch:!0})})),it("should handle form submission successfully and trigger validators",(async()=>{s.expectOne("assets/navlinks.json").flush([]),await t.whenStable();const r=spyOn(o,"navigate"),a=e.registerForm.controls.username,n=e.registerForm.controls.email;a.setAsyncValidators(l.uniqueUsernameValidator()),n.setAsyncValidators(c.uniqueEmailValidator()),a.setValue("validUsername"),n.setValue("valid@example.com"),a.updateValueAndValidity(),n.updateValueAndValidity(),await t.whenStable(),t.detectChanges(),expect(l.uniqueUsernameValidator).toHaveBeenCalled(),expect(c.uniqueEmailValidator).toHaveBeenCalled(),expect(a.errors).toBeNull(),expect(n.errors).toBeNull(),expect(e.registerForm.valid).toBeFalse(),e.registerForm.controls.vorname.setValue("John"),e.registerForm.controls.nachname.setValue("Doe"),e.registerForm.controls.password.setValue("password123"),e.registerForm.controls.passwordConfirm.setValue("password123"),e.registerForm.updateValueAndValidity(),await t.whenStable(),t.detectChanges(),expect(e.registerForm.valid).toBeTrue();const i=t.debugElement.nativeElement.querySelector(".mainBtn");expect(i).toBeTruthy(),i.click(),t.detectChanges();const u=s.expectOne("http://localhost:5000/api/auth/register");expect(u.request.method).toBe("POST"),u.flush({vorname:"John",nachname:"Doe",username:"validUsername",email:"valid@example.com"}),expect(r).toHaveBeenCalledWith(["/login"])}))}));