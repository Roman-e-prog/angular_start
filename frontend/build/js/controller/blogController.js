"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.updateBlog=exports.getBlogpost=exports.getAllBlogposts=exports.deleteBlogpost=exports.createBlog=void 0;var _dbconnect=_interopRequireDefault(require("../db/dbconnect")),_cloudinary=_interopRequireDefault(require("../utils/cloudinary")),_fs=_interopRequireDefault(require("fs"));function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}const createBlog=async(t,e)=>{const{blog_title:o,blog_content:a,blog_theme:s,blog_author:l}=t.body,n=t.files;if(n){const t=[],r=[];for(let e of n){const o=e.path.replace(/\\/g,"/"),a=await _cloudinary.default.uploader.upload(o,{folder:"angular_start",resource_type:"auto"});t.push(a.public_id),r.push(a.secure_url),_fs.default.unlink(o,(t=>{t&&console.error(`Failed to delete file ${o}:`,t)}))}try{const n=await _dbconnect.default.query("INSERT INTO blog (blog_title, blog_content, blog_theme, blog_author, cloudinary_ids, images, created_at, updated_at) VALUES($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *",[o,a,s,l,t,r,new Date((new Date).toISOString()),new Date((new Date).toISOString())]);e.status(200).json(n.rows[0])}catch(t){e.status(403).json("Upload impossible")}}else try{const t=await _dbconnect.default.query("INSERT INTO blog (blog_title, blog_content, blog_theme, blog_author, created_at, updated_at) VALUES($1, $2, $3, $4, $5, $6) RETURNING*",[o,a,s,l,new Date((new Date).toISOString()),new Date((new Date).toISOString())]);e.status(200).json(t.rows[0])}catch(t){e.status(403).json("Upload impossible")}};exports.createBlog=createBlog;const updateBlog=async(t,e)=>{const{blog_title:o,blog_content:a,blog_theme:s,blog_author:l}=t.body,n=t.files,r=t.body.index,u=[],d=t.params.id;let c;try{c=(await _dbconnect.default.query("SELECT * FROM blog WHERE id = $1",[d])).rows[0]}catch(t){e.status(404).json("Nicht gefunden")}if(n&&n.length){Object.values(r).forEach((t=>{u.push(parseInt(t))}));for(let t=0;t<n.length;t++){const e=n[t].path.replace(/\\/g,"/"),o=u[t];c.cloudinary_ids[o]&&_cloudinary.default.uploader.destroy(c.cloudinary_ids[o]);const a=await _cloudinary.default.uploader.upload(e,{folder:"angular_start",resource_type:"auto"});c&&c.images&&(c.images[o]=a.secure_url),c&&c.cloudinary_ids&&(c.cloudinary_ids[o]=a.public_id),_fs.default.unlink(e,(t=>{t&&console.error(`Failed to delete file ${e}:`,t)}))}try{const t=await _dbconnect.default.query("UPDATE blog SET blog_title = $1, blog_content = $2, blog_theme = $3, blog_author = $4, cloudinary_ids = $5, images = $6, updated_at = $7 WHERE id = $8",[o,a,s,l,c.cloudinary_ids,c.images,new Date((new Date).toISOString()),d]);e.status(200).json(t.rows[0])}catch(t){e.status(404).json("Nicht gefunden")}}else try{const t=await _dbconnect.default.query("UPDATE blog SET blog_title = $1, blog_content = $2, blog_theme = $3, blog_author = $4,updated_at = $5 WHERE id = $6",[o,a,s,l,new Date((new Date).toISOString()),d]);e.status(200).json(t.rows[0])}catch(t){e.status(404).json("Nicht gefunden")}};exports.updateBlog=updateBlog;const deleteBlogpost=async(t,e)=>{const o=t.params.id;let a;try{a=(await _dbconnect.default.query("SELECT cloudinary_ids FROM blog WHERE id = $1",[o])).rows[0].cloudinary_ids,_cloudinary.default.uploader.destroy(a),await _dbconnect.default.query("DELETE FROM blog WHERE id = $1",[o]),e.status(200).json(`Blogpost mit der Id ${o} wurde gelöscht`)}catch(t){e.status(500).json("Nicht möglich diesen Beitrag zu löschen")}};exports.deleteBlogpost=deleteBlogpost;const getBlogpost=async(t,e)=>{const o=t.params.id;try{const t=await _dbconnect.default.query("SELECT * FROM blog WHERE id = $1",[o]);e.status(200).json(t.rows[0])}catch(t){e.status(404).json("Nicht gefunden")}};exports.getBlogpost=getBlogpost;const getAllBlogposts=async(t,e)=>{try{const t=await _dbconnect.default.query("SELECT * FROM blog");e.status(200).json(t.rows)}catch(t){e.status(404).json(t.message)}};exports.getAllBlogposts=getAllBlogposts;