"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.adminmessagesPut=exports.adminmessagesPost=exports.adminmessagesGetAllForUser=exports.adminmessagesGetAll=exports.adminmessagesGet=exports.adminmessagesDelete=void 0;var _dbconnect=_interopRequireDefault(require("../db/dbconnect"));function _interopRequireDefault(s){return s&&s.__esModule?s:{default:s}}const adminmessagesPost=async(s,e)=>{const{username:t,user_id:a,usermessage_id:n,message:d,adminname:m,admin_id:i}=s.body;try{const s=await _dbconnect.default.query("INSERT INTO adminmessages (username, user_id, usermessage_id, message, adminname, admin_id, created_at, updated_at) VALUES($1, $2, $3, $4, $5, $6, $7, $8) RETURNING*",[t,a,n,d,m,i,new Date((new Date).toISOString()),new Date((new Date).toISOString())]);await _dbconnect.default.query("UPDATE usermessages SET is_answered = true WHERE id = $1",[parseInt(n)]),e.status(200).json(s.rows[0])}catch(s){e.status(403).json("Upload nicht möglich")}};exports.adminmessagesPost=adminmessagesPost;const adminmessagesPut=async(s,e)=>{const{message:t}=s.body,a=s.params.id;try{const s=await _dbconnect.default.query("UPDATE adminmessages SET message = $1, updated_at = $2 WHERE id =$3",[t,new Date((new Date).toISOString()),a]);e.status(200).json(s.rows[0])}catch(s){e.status(404).json("Nicht gefunden")}};exports.adminmessagesPut=adminmessagesPut;const adminmessagesDelete=async(s,e)=>{const t=s.params.id;try{await _dbconnect.default.query("DELETE FROM adminmessages WHERE id =$1",[t]),e.status(200).json(`Nachricht mit der id ${t} wurde gelöscht`)}catch(s){e.status(404).json("Nicht gefunden")}};exports.adminmessagesDelete=adminmessagesDelete;const adminmessagesGet=async(s,e)=>{const t=s.params.id;try{const s=await _dbconnect.default.query("SELECT * FROM adminmessages WHERE id = $1",[t]);e.status(200).json(s.rows[0])}catch(s){e.status(404).json("Nicht gefunden")}};exports.adminmessagesGet=adminmessagesGet;const adminmessagesGetAll=async(s,e)=>{try{const s=await _dbconnect.default.query("SELECT * FROM adminmessages");e.status(200).json(s.rows)}catch(s){e.status(404).json("Nicht gefunden")}};exports.adminmessagesGetAll=adminmessagesGetAll;const adminmessagesGetAllForUser=async(s,e)=>{const t=s.params.id;try{const s=await _dbconnect.default.query("SELECT * FROM adminmessages WHERE user_id = $1",[t]);e.status(200).json(s.rows)}catch(s){e.status(404).json("Nicht gefunden")}};exports.adminmessagesGetAllForUser=adminmessagesGetAllForUser;