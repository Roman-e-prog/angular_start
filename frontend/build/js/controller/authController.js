"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.uniqueUsername=exports.uniqueEmail=exports.register=exports.refreshToken=exports.newPassword=exports.login=exports.forgotten=void 0;var _dbconnect=_interopRequireDefault(require("../db/dbconnect")),_bcrypt=_interopRequireDefault(require("bcrypt")),jwt=_interopRequireWildcard(require("jsonwebtoken")),_nodemailer=_interopRequireDefault(require("nodemailer"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(_getRequireWildcardCache=function(e){return e?r:t})(e)}function _interopRequireWildcard(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=_getRequireWildcardCache(t);if(r&&r.has(e))return r.get(e);var s={__proto__:null},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&{}.hasOwnProperty.call(e,o)){var a=n?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(s,o,a):s[o]=e[o]}return s.default=e,r&&r.set(e,s),s}function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}const passgen=require("passgen"),transporter=_nodemailer.default.createTransport({host:"0.0.0.0",port:1025});var token=passgen.create(24);const register=async(e,t)=>{const r=await _bcrypt.default.genSalt(10),s=_bcrypt.default.hashSync(e.body.password,r),n=e.body.username,o=e.body.vorname,a=e.body.nachname,i=e.body.email,c=s,u=e.body.profilePicture;try{const e=await _dbconnect.default.query("INSERT INTO blogmembers (username, vorname, nachname, email, password, profile_picture, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *",[n,o,a,i,c,u,new Date((new Date).toISOString()),new Date((new Date).toISOString())]);t.status(200).json(e.rows[0])}catch(e){t.status(403).json("Registrierung nicht möglich")}};exports.register=register;const sec=process.env.JWT_SEC,refreshSec=process.env.JWT_REFRESH_SEC,generateAccessToken=e=>jwt.sign(e,sec,{expiresIn:"5m"}),generateRefreshToken=e=>jwt.sign(e,refreshSec,{expiresIn:"7d"}),login=async(e,t)=>{const r=e.body.username,s=e.body.email;try{await _dbconnect.default.query("SELECT * FROM blogmembers WHERE username = $1",[r],((r,n)=>{if(r)throw new Error(r.message);if(n.rows[0]){const r=_bcrypt.default.compare(e.body.password,n.rows[0].password),o=n.rows[0].email;if(r&&o===s){const e=n.rows[0],r=generateAccessToken({id:e.id,is_admin:e.is_admin}),s=generateRefreshToken({id:e.id,is_admin:e.is_admin}),{id:o,vorname:a,nachname:i,username:c,email:u,is_admin:d,profile_picture:l,created_at:m,updated_at:p}=n.rows[0];t.status(200).json({id:o,vorname:a,nachname:i,username:c,email:u,is_admin:d,profile_picture:l,created_at:m,updated_at:p,accessToken:r,refreshToken:s})}else t.json("Email oder Passwort sind falsch")}}))}catch(e){t.status(403).json("Kein Login möglich")}};exports.login=login;const refreshToken=(e,t)=>{try{const r=process.env.JWT_REFRESH_SEC,s=e.body.refresh_token;if(!s)return t.status(401).json("Not authenticated");jwt.verify(s,r,(async(e,r)=>{if(e)return t.status(403).json("Invalid refresh token");const s=generateAccessToken({id:r.id,is_admin:r.is_admin});t.status(200).json({accessToken:s})}))}catch(e){t.status(404).json("No refreshtoken found")}};exports.refreshToken=refreshToken;const uniqueUsername=async(e,t)=>{const r=e.body.username;try{const e=await _dbconnect.default.query("SELECT username FROM blogmembers WHERE username = $1",[r]);e.rows[0]?t.status(200).json(e.rows[0].username):t.json(null)}catch(e){t.status(403).json("request is impossible")}};exports.uniqueUsername=uniqueUsername;const uniqueEmail=async(e,t)=>{const r=e.body.email;try{const e=await _dbconnect.default.query("SELECT email FROM blogmembers WHERE email = $1",[r]);e.rows[0]?t.status(200).json(e.rows[0].email):t.json(null)}catch(e){t.status(403).json("request is impossible")}};exports.uniqueEmail=uniqueEmail;const forgotten=async(e,t)=>{const r=e.body.email;try{await _dbconnect.default.query("Insert INTO forgotten (token, email) VALUES ($1, $2)",[token,r]);const e=`http://localhost:4200/reset/${token}`;await transporter.sendMail({from:"admin@example.com",to:r,subject:"Reset your password",html:`Klicken Sie<a href="${e}"> hier</a> um Ihr Passwort zurückzusetzen`}),t.status(200).json("Bitte öffnen Sie jetzt Ihre Email")}catch(e){t.status(404).json("Passwortreset nicht möglich")}};exports.forgotten=forgotten;const newPassword=async(e,t)=>{const r=e.body.token,s=e.body.password;try{const e=(await _dbconnect.default.query("SELECT * FROM forgotten WHERE token = $1",[r])).rows[0].email;await _dbconnect.default.query("UPDATE blogmembers SET password=$1 WHERE email=$2",[s,e]),t.status(200).json("Ihr Passwort wurde erfolgreich geändert")}catch(e){t.status(404).json(e.message)}};exports.newPassword=newPassword;